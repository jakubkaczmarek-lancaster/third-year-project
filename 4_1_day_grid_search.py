# -*- coding: utf-8 -*-
"""4.1 day grid search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kGmhtqfqfSck4VZ2g5SmPZc58v3VO1al
"""

from google.colab import drive
drive.mount("/content/gdrive")

#Electricity
#MC204-L03_M9R12 Best ARIMA(6, 0, 1) RMSE=22.469
#MC061-L04_M24R12 Best ARIMA(4, 0, 2) RMSE=19.432
#MC134-L01_M9R14 Best ARIMA(4, 0, 2) RMSE=9.564

#Water
#MC067-L01_M1 Best ARIMA(0, 1, 1) RMSE=0.00185
#MC046-L04_M4 Best ARIMA(4, 0, 2) RMSE=0.29011
#MC078-L02_M3 Best ARIMA(1, 0, 0) RMSE=0.15962

#Heat
#MC076-L01_M2 Best ARIMA(6, 0, 2) RMSE=0.01164
#MC065-L02_M3 Best ARIMA(6, 0, 2) RMSE=0.00712
#MC048-L01_M5 Best ARIMA(1, 1, 1) RMSE=0.01180

import pandas as pd
series = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/30min/MC048-L01_M5format30min.csv', header=0, index_col=0)

# grid search ARIMA parameters for time series, repeat for each meter above and add result after name
import warnings
from math import sqrt
import pandas as pd
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error

# evaluate an ARIMA model for a given order (p,d,q)
def evaluate_arima_model(X, arima_order):
	# prepare training dataset
	train, test = X[0:672], X[672:720]
	history = [x for x in train]
	# make predictions
	predictions = list()
	for t in range(len(test)):
		model = ARIMA(history, order=arima_order)
		model_fit = model.fit()
		yhat = model_fit.forecast()[0]
		predictions.append(yhat)
		history.append(test[t])
	# calculate out of sample error
	rmse = sqrt(mean_squared_error(test, predictions))
	return rmse

# evaluate combinations of p, d and q values for an ARIMA model
def evaluate_models(dataset, p_values, d_values, q_values):
	dataset = dataset.astype('float32')
	best_score, best_cfg = float("inf"), None
	for p in p_values:
		for d in d_values:
			for q in q_values:
				order = (p,d,q)
				try:
					rmse = evaluate_arima_model(dataset, order)
					if rmse < best_score:
						best_score, best_cfg = rmse, order
					print('ARIMA%s RMSE=%.5f' % (order,rmse))
				except:
					continue
	print('Best ARIMA%s RMSE=%.5f' % (best_cfg, best_score))


series = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/30min/MC048-L01_M5format30min.csv', header=0, index_col=0)
# evaluate parameters
p_values = [0, 1, 2, 4, 6]
d_values = range(0, 3)
q_values = range(0, 3)
warnings.filterwarnings("ignore")
evaluate_models(series.values, p_values, d_values, q_values)