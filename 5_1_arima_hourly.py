# -*- coding: utf-8 -*-
"""5.1 Arima Hourly.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JIutOKpTckuEUba_myi_HsVfl242u1t0
"""

from google.colab import drive
drive.mount("/content/gdrive")

import statsmodels.tsa.arima_model
import matplotlib
import pandas as pd
import numpy as np
from pandas import read_csv
from pandas import datetime
from matplotlib import pyplot
from pandas import DataFrame
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_squared_error
from math import sqrt
from pandas.plotting import autocorrelation_plot
matplotlib.rc('figure', figsize=(30, 10))

#read data
data = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/60min/MC061-L04_M24R12format60min.csv', header=0, index_col=0, squeeze=True)
data.dropna(inplace=True)
data = data[0:672]

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.tsa.stattools import adfuller
sns.set()

#Graph colours
green = sns.color_palette("deep", 8)[2]
blue = sns.color_palette("deep", 8)[0]

#set datetime
data.index = pd.to_datetime(data.index)

#plotting the raw data
plt.plot(data.index,data.values, color=green)
plt.title("MC061-L04_M24R12 Hourly Resample",fontsize=18)
plt.xlabel("Date",fontsize=16)
plt.xticks(fontsize=14, rotation = 0)
plt.ylabel("Reading Water (m3))",fontsize=16)
plt.yticks(fontsize=14)

plt.show()

autocorrelation_plot(data)
pyplot.show()

# fit arima and plot error
from pandas import datetime
from pandas import read_csv
from pandas import DataFrame
from statsmodels.tsa.arima_model import ARIMA
from matplotlib import pyplot
# load dataset
#data = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/60min/MC078-L02_M3format60min.csv', header=0, index_col=0, squeeze=True)
#data.dropna(inplace=True)
# fit model
model = ARIMA(data, order=(6,0,2))
model_fit = model.fit()
# summary of model_fit
print(model_fit.summary())
# line plot of error
residuals = DataFrame(model_fit.resid)
residuals.plot()
pyplot.show()
# density plot of error
residuals.plot(kind='kde')
pyplot.show()
# summary stats of residuals
print(residuals.describe())

#Defining MAPE function
def MAPE(Y_actual,Y_Predicted):
    mape = np.mean(np.abs((Y_actual - Y_Predicted)/Y_actual))*100
    return mape

from pandas import read_csv
from statsmodels.tsa.stattools import adfuller
#data = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/60min/MC078-L02_M3format60min.csv', header=0, index_col=0, squeeze=True)
#data.dropna(inplace=True)
X = data.values
result = adfuller(X, maxlag=24)
print('ADF Statistic: %.20f' % result[0])
print('p-value: %.20f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
	print('\t%s: %.20f' % (key, value))

from pandas import read_csv
from pandas import datetime
from matplotlib import pyplot
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt

data = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/60min/MC061-L04_M24R12format60min.csv', header=0, index_col=0, squeeze=True)
data.dropna(inplace=True)

# split into train and test sets
X = data.values
#size = int(len(X) * 0.66)
train, testset = X[0:504], X[504:672]
history = [x for x in train]
arimapredictions = list()
# walk-forward validation
for t in range(len(testset)):
	model = ARIMA(history, order=(1,1,1))
	model_fit = model.fit()
	output = model_fit.forecast()
	yhat = output[0]
	arimapredictions.append(yhat)
	obs = testset[t]
	history.append(obs)
	print('predicted=%f, expected=%f' % (yhat, obs))
# evaluate forecasts
rmse = sqrt(mean_squared_error(testset, arimapredictions))
mape = MAPE(testset, arimapredictions)
print('Test RMSE: %.5f' % rmse)
# plot forecasts against actual outcomes
pyplot.plot(testset)
pyplot.plot(arimapredictions, color='red')
pyplot.title("MC078-L02_M3 Week Forecast",fontsize=18)
pyplot.ylabel("Reading Heat (kWh)",fontsize=16)
pyplot.yticks(fontsize=14)
pyplot.show()

pyplot.plot(testset)
pyplot.plot(arimapredictions, color='red')
pyplot.title("MC078-L02_M3 Week Forecast",fontsize=18)
pyplot.ylabel("Reading Heat (kWh)",fontsize=16)
pyplot.yticks(fontsize=14)
pyplot.show()