# -*- coding: utf-8 -*-
"""6.1 LSTM week.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FPvVeU7fudwsXtqnFFRFQGdp4oPkiwv1
"""

from google.colab import drive
drive.mount("/content/gdrive")

import numpy
import matplotlib
matplotlib.rc('figure', figsize=(30, 10))
import matplotlib.pyplot as plt
import pandas as pd
import math
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error

# fix random seed for reproducibility
numpy.random.seed(7)

# load the dataset
dataframe = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/60min/MC061-L04_M24R12format60min.csv', usecols=[1], engine='python')
dataset = dataframe[0:672]
thingy = dataset.values
testest = thingy[504:672]
dataset = dataset.astype('float32')
print(len(testest))
max, min = testest.max(), testest.min()
print(max, min)

# normalize the dataset
scaler = MinMaxScaler(feature_range=(0, 1))
dataset = scaler.fit_transform(dataset)

# split into train and test sets
train_size = int(len(dataset) * 0.75)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]

print(len(train), len(test))

def create_dataset(dataset, look_back):
	dataX, dataY = [], []
	for i in range(len(dataset)-look_back-1):
		a = dataset[i:(i+look_back), 0]
		dataX.append(a)
		dataY.append(dataset[i + look_back, 0])
	return numpy.array(dataX), numpy.array(dataY)

# reshape into X=t and Y=t+1
look_back = 1
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)
# reshape input to be [samples, time steps, features]
trainX = numpy.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = numpy.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

# create and fit the LSTM network
model = Sequential()
model.add(LSTM(4, input_shape=(1, look_back)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=60, batch_size=2, verbose=0)

#calculate aic for regression
def calculate_aic(n, mse):
	aic = n * math.log(mse) + 2 * 101
	return aic
#calculate bic for regression
def calculate_bic(n, mse):
	bic = n * math.log(mse) + 101 * math.log(n)
	return bic

#Defining NRMSE function
def NRMSE(rmse, max, min):
    nrmse = rmse/(max - min)
    return nrmse

#Defining MAPE function
def MAPE(testset, arimapredictions):
    mape = np.mean(np.abs((testset - arimapredictions)/testset))*100
    return mape

# make predictions
trainPredict = model.predict(trainX)
testPredict = model.predict(testX)
# invert predictions
trainPredict = scaler.inverse_transform(trainPredict)
trainY = scaler.inverse_transform([trainY])
testPredict = scaler.inverse_transform(testPredict)
testY = scaler.inverse_transform([testY])

import numpy as np
print('WEEK RESULTS')

#calculate the mean squared error
MSEtrainScore = mean_squared_error(trainY[0], trainPredict[:,0])
print('Train Score: %.5f MSE' % (MSEtrainScore))
MSEtestScore = mean_squared_error(testY[0], testPredict[:,0])
print('Test Score: %.5f MSE' % (MSEtestScore))
#calculate root mean squared error
trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))
print('Train Score: %.5f RMSE' % (trainScore))
testScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))
print('Test Score: %.5f RMSE' % (testScore))
#calculate the train aic
aic = calculate_aic(len(testY[0]), MSEtrainScore)
print('Train AIC: %.5f' % aic)
#calculate the train bic
bic = calculate_bic(len(testY[0]), MSEtrainScore)
print('Train BIC: %.5f' % bic)
#calculate the test aic
aic = calculate_aic(len(testY[0]), MSEtestScore)
print('Test AIC: %.5f' % aic)
#calculate the test bic
bic = calculate_bic(len(testY[0]), MSEtestScore)
print('Test BIC: %.5f' % bic)

nrmse = NRMSE(testScore, max, min)
mape = MAPE(testY[0], testPredict[:,0])
print('Test Normalized RMSE: %.5f' % nrmse)
print('Test MAPE: %.5f' % mape)

print(model.summary())

# shift train predictions for plotting
trainPredictPlot = numpy.empty_like(dataset)
trainPredictPlot[:, :] = numpy.nan
trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict
# shift test predictions for plotting
testPredictPlot = numpy.empty_like(dataset)
testPredictPlot[:, :] = numpy.nan
testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict
# plot baseline and predictions
plt.plot(scaler.inverse_transform(dataset), label='raw data')
plt.plot(trainPredictPlot, label='train prediction', color = 'green')
plt.plot(testPredictPlot, label='test prediction', color = 'red')
plt.title("MC078-L02_M3 Week Forecast",fontsize=18)
plt.ylabel("Reading Water (m3)",fontsize=16)
plt.yticks(fontsize=14)
leg = plt.legend()
plt.show()

#plot just test and prediction
plt.plot(testPredict, label='test prediction', color = 'red')
plt.plot(scaler.inverse_transform(test), label='raw test data', color='blue')
plt.title("MC078-L02_M32 Week Forecast",fontsize=18)
plt.ylabel("Reading Water (m3)",fontsize=16)
plt.yticks(fontsize=14)
leg = plt.legend()
plt.show()