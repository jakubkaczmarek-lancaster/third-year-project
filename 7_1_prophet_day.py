# -*- coding: utf-8 -*-
"""7.1 Prophet day.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pnko0FUVV3DedSPd1T4BAecaMJVvfdBt
"""

from google.colab import drive
drive.mount("/content/gdrive")

from fbprophet import Prophet
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
matplotlib.rc('figure', figsize=(30, 10))

df = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/30min/MC078-L02_M3format30min.csv', header=0)
df = df[0:720]
# summarize shape
print(df.shape)
# show first few rows
print(df.head())

# prepare expected column names
df.columns = ['ds', 'y']
df['ds']= pd.to_datetime(df['ds'])
df['ds'] = df['ds'].dt.tz_localize(None)
train, test = df[0:672], df[672:720]
# define the model
model = Prophet()
# fit the model
model.fit(train)
#make future dates which correspond to 1 day ie 672:720
day = model.make_future_dataframe(periods=48, freq='30min', include_history = False)
full = model.make_future_dataframe(periods=48, freq='30min', include_history = True)

# use the model to make a forecast
dayforecast = model.predict(day)
fullforecast = model.predict(full)

fig, ax = plt.subplots()
plt.plot(dayforecast.ds, dayforecast.yhat, label='test prediction', color = 'red')
plt.plot(test.ds,test.y, label='raw test data', color='blue')
plt.title("MC078-L02_M3 Day Forecast",fontsize=18)
plt.ylabel("Reading Water (m3)",fontsize=16)
plt.yticks(fontsize=14)
ax.fill_between(dayforecast.ds, dayforecast.yhat_upper, dayforecast.yhat_lower, color = 'red', alpha=0.2)
leg = plt.legend()
plt.show()

fig, ax = plt.subplots()
plt.plot(fullforecast.ds, fullforecast.yhat, label='train prediction', color = 'green')
plt.plot(dayforecast.ds, dayforecast.yhat, label='test prediction', color = 'red')
plt.plot(train.ds,train.y, label='raw data', color='blue')
plt.plot(test.ds,test.y, color='blue')
plt.title("MC078-L02_M3 Day Forecast",fontsize=18)
plt.ylabel("Reading Water (m3)",fontsize=16)
plt.yticks(fontsize=14)
ax.fill_between(dayforecast.ds, dayforecast.yhat_upper, dayforecast.yhat_lower, color = 'red', alpha=0.1)
ax.fill_between(fullforecast.ds, fullforecast.yhat_upper, fullforecast.yhat_lower, color = 'green', alpha=0.1)
leg = plt.legend()
plt.show()

from sklearn.metrics import mean_squared_error
import math

print('WEEK RESULTS')
#calculate the mean squared error
MSEtestScore = mean_squared_error(test.y, dayforecast.yhat)
print('Test Score: %.5f MSE' % (MSEtestScore))
#calculate root mean squared error
testScore = math.sqrt(mean_squared_error(test.y, dayforecast.yhat))
print('Test Score: %.5f RMSE' % (testScore))