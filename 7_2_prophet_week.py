# -*- coding: utf-8 -*-
"""7.2 Prophet week.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11PDHwpZrEIohrAf4ul_hT1Hm03GnNvn2
"""

from google.colab import drive
drive.mount("/content/gdrive")

from fbprophet import Prophet
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
matplotlib.rc('figure', figsize=(30, 10))

#Defining MAPE function
def MAPE(test, weekforecast):
    mape = np.mean(np.abs((test - weekforecast) / test))*100
    return mape
#Defining RMSE function
def RMSE(Y_actual,Y_Predicted):
    rmse = sqrt(mean_squared_error(Y_actual, Y_Predicted))
    return rmse
#Defining NRMSE function
def NRMSE(rmse, max, min):
    nrmse = rmse/(max - min)
    return nrmse

df = pd.read_csv('/content/gdrive/My Drive/data/Synetica/meters_final/60min/MC078-L02_M3format60min.csv', header=0)
df = df[0:672]
# summarize shape
print(df.shape)
# show first few rows
print(df.head())

# prepare expected column names
df.columns = ['ds', 'y']
df['ds']= pd.to_datetime(df['ds'])
df['ds'] = df['ds'].dt.tz_localize(None)
train, test = df[0:504], df[504:672]
# define the model
model = Prophet()
# fit the model
model.fit(train)
#make future dates which correspond to 1 week ie 504:672
week = model.make_future_dataframe(periods=168, freq='H', include_history = False)
full = model.make_future_dataframe(periods=168, freq='H', include_history = True)

# use the model to make a forecast
weekforecast = model.predict(week)
fullforecast = model.predict(full)
# summarize the forecast
#print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())
# plot forecast
#model.plot(forecast)
#pyplot.show()

fig, ax = plt.subplots()
plt.plot(weekforecast.ds, weekforecast.yhat, label='test prediction', color = 'red')
plt.plot(test.ds,test.y, label='raw test data', color='blue')
plt.title("MC078-L02_M3 Week Forecast",fontsize=18)
plt.ylabel("Reading Water (m3)",fontsize=16)
plt.yticks(fontsize=14)
ax.fill_between(weekforecast.ds, weekforecast.yhat_upper, weekforecast.yhat_lower, color = 'red', alpha=0.2)
leg = plt.legend()
plt.show()

fig, ax = plt.subplots()
plt.plot(fullforecast.ds, fullforecast.yhat, label='train prediction', color = 'green')
plt.plot(weekforecast.ds, weekforecast.yhat, label='test prediction', color = 'red')
plt.plot(train.ds,train.y, label='raw data', color='blue')
plt.plot(test.ds,test.y, color='blue')
plt.title("MC078-L02_M3 Week Forecast",fontsize=18)
plt.ylabel("Reading Water (m3)",fontsize=16)
plt.yticks(fontsize=14)
ax.fill_between(weekforecast.ds, weekforecast.yhat_upper, weekforecast.yhat_lower, color = 'red', alpha=0.1)
ax.fill_between(fullforecast.ds, fullforecast.yhat_upper, fullforecast.yhat_lower, color = 'green', alpha=0.1)
leg = plt.legend()
plt.show()

from sklearn.metrics import mean_squared_error
import math

print('WEEK RESULTS')
#calculate the mean squared error
MSEtestScore = mean_squared_error(test.y, weekforecast.yhat)
print('Test Score: %.5f MSE' % (MSEtestScore))
#calculate root mean squared error
testScore = math.sqrt(mean_squared_error(test.y, weekforecast.yhat))
print('Test Score: %.5f RMSE' % (testScore))
thing = mape(test.y, weekforecast.yhat)
print('MAPE: %.5f' % (thing))